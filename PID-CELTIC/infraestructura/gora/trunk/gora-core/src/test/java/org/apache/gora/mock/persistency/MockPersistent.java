/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.gora.mock.persistency;  

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("all")
public class MockPersistent extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MockPersistent\",\"namespace\":\"org.apache.gora.mock.persistency\",\"fields\":[{\"name\":\"foo\",\"type\":\"int\"},{\"name\":\"baz\",\"type\":\"int\"}]}");

  private static final Map<String, Integer> FIELD2INDEX_MAP ;
  private static final Map<Integer, String> INDEX2FIELD_MAP ;
  
  static {
    Map<String,Integer> field2Index = new HashMap<String,Integer>(2) ;
            field2Index.put("foo", 0) ;
            field2Index.put("baz", 1) ;
            FIELD2INDEX_MAP = Collections.unmodifiableMap(field2Index) ;
    
    Map<Integer, String> index2Field = new HashMap<Integer,String>(2) ;
            index2Field.put(0, "foo") ;
            index2Field.put(1, "baz") ;
            INDEX2FIELD_MAP = Collections.unmodifiableMap(index2Field) ;
  }
  
  /** Enum containing all data bean's fields. */
  public static enum Field {
    FOO(0, "foo"),
    BAZ(1, "baz"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "foo",
  "baz",
  };

  @Override
  public Map<String, Integer> getField2IndexMapping() {
    return FIELD2INDEX_MAP ;
  }

  @Override
  public Map<Integer, String> getIndex2FieldMapping() {
    return INDEX2FIELD_MAP ;
  }

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return MockPersistent._ALL_FIELDS.length;
  }

  private int foo;
  private int baz;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return foo;
    case 1: return baz;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    if (field$ >= 0 && field$ < 2) {
      setDirty(field$) ;
    }
    switch (field$) {
    case 0: foo = (java.lang.Integer)(value); break;
    case 1: baz = (java.lang.Integer)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'foo' field.
   */
  public java.lang.Integer getFoo() {
    return foo;
  }

  /**
   * Sets the value of the 'foo' field.
   * @param value the value to set.
   */
  public void setFoo(java.lang.Integer value) {
    this.foo = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'foo' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFooDirty(java.lang.Integer value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'baz' field.
   */
  public java.lang.Integer getBaz() {
    return baz;
  }

  /**
   * Sets the value of the 'baz' field.
   * @param value the value to set.
   */
  public void setBaz(java.lang.Integer value) {
    this.baz = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'baz' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBazDirty(java.lang.Integer value) {
    return isDirty(1);
  }

  /** Creates a new MockPersistent RecordBuilder */
  public static org.apache.gora.mock.persistency.MockPersistent.Builder newBuilder() {
    return new org.apache.gora.mock.persistency.MockPersistent.Builder();
  }
  
  /** Creates a new MockPersistent RecordBuilder by copying an existing Builder */
  public static org.apache.gora.mock.persistency.MockPersistent.Builder newBuilder(org.apache.gora.mock.persistency.MockPersistent.Builder other) {
    return new org.apache.gora.mock.persistency.MockPersistent.Builder(other);
  }
  
  /** Creates a new MockPersistent RecordBuilder by copying an existing MockPersistent instance */
  public static org.apache.gora.mock.persistency.MockPersistent.Builder newBuilder(org.apache.gora.mock.persistency.MockPersistent other) {
    return new org.apache.gora.mock.persistency.MockPersistent.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToWriteOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for MockPersistent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MockPersistent>
    implements org.apache.avro.data.RecordBuilder<MockPersistent> {

    private int foo;
    private int baz;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.gora.mock.persistency.MockPersistent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.gora.mock.persistency.MockPersistent.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing MockPersistent instance */
    private Builder(org.apache.gora.mock.persistency.MockPersistent other) {
            super(org.apache.gora.mock.persistency.MockPersistent.SCHEMA$);
      if (isValidValue(fields()[0], other.foo)) {
        this.foo = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.foo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baz)) {
        this.baz = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.baz);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'foo' field */
    public java.lang.Integer getFoo() {
      return foo;
    }
    
    /** Sets the value of the 'foo' field */
    public org.apache.gora.mock.persistency.MockPersistent.Builder setFoo(int value) {
      validate(fields()[0], value);
      this.foo = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'foo' field has been set */
    public boolean hasFoo() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'foo' field */
    public org.apache.gora.mock.persistency.MockPersistent.Builder clearFoo() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'baz' field */
    public java.lang.Integer getBaz() {
      return baz;
    }
    
    /** Sets the value of the 'baz' field */
    public org.apache.gora.mock.persistency.MockPersistent.Builder setBaz(int value) {
      validate(fields()[1], value);
      this.baz = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'baz' field has been set */
    public boolean hasBaz() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'baz' field */
    public org.apache.gora.mock.persistency.MockPersistent.Builder clearBaz() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    @Override
    public MockPersistent build() {
      try {
        MockPersistent record = new MockPersistent();
        record.foo = fieldSetFlags()[0] ? this.foo : (java.lang.Integer) defaultValue(fields()[0]);
        record.baz = fieldSetFlags()[1] ? this.baz : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public MockPersistent.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public MockPersistent newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends MockPersistent implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'foo' field.
		   */
	  public java.lang.Integer getFoo() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'foo' field.
		   * @param value the value to set.
	   */
	  public void setFoo(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'foo' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFooDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'baz' field.
		   */
	  public java.lang.Integer getBaz() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'baz' field.
		   * @param value the value to set.
	   */
	  public void setBaz(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'baz' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBazDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}