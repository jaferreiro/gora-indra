/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.gora.cascading.test.storage;  

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("all")
public class TestRowDest extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestRowDest\",\"namespace\":\"org.apache.gora.cascading.test.storage\",\"fields\":[{\"name\":\"defaultLong1\",\"type\":\"long\",\"default\":1},{\"name\":\"defaultStringEmpty\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"columnLong\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"unionRecursive\",\"type\":[\"null\",\"TestRowDest\"],\"default\":null},{\"name\":\"unionString\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"unionLong\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"unionDefNull\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"family2\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"default\":{}}]}");

  private static final Map<String, Integer> FIELD2INDEX_MAP ;
  private static final Map<Integer, String> INDEX2FIELD_MAP ;
  
  static {
    Map<String,Integer> field2Index = new HashMap<String,Integer>(8) ;
            field2Index.put("defaultLong1", 0) ;
            field2Index.put("defaultStringEmpty", 1) ;
            field2Index.put("columnLong", 2) ;
            field2Index.put("unionRecursive", 3) ;
            field2Index.put("unionString", 4) ;
            field2Index.put("unionLong", 5) ;
            field2Index.put("unionDefNull", 6) ;
            field2Index.put("family2", 7) ;
            FIELD2INDEX_MAP = Collections.unmodifiableMap(field2Index) ;
    
    Map<Integer, String> index2Field = new HashMap<Integer,String>(8) ;
            index2Field.put(0, "defaultLong1") ;
            index2Field.put(1, "defaultStringEmpty") ;
            index2Field.put(2, "columnLong") ;
            index2Field.put(3, "unionRecursive") ;
            index2Field.put(4, "unionString") ;
            index2Field.put(5, "unionLong") ;
            index2Field.put(6, "unionDefNull") ;
            index2Field.put(7, "family2") ;
            INDEX2FIELD_MAP = Collections.unmodifiableMap(index2Field) ;
  }
  
  /** Enum containing all data bean's fields. */
  public static enum Field {
    DEFAULT_LONG1(0, "defaultLong1"),
    DEFAULT_STRING_EMPTY(1, "defaultStringEmpty"),
    COLUMN_LONG(2, "columnLong"),
    UNION_RECURSIVE(3, "unionRecursive"),
    UNION_STRING(4, "unionString"),
    UNION_LONG(5, "unionLong"),
    UNION_DEF_NULL(6, "unionDefNull"),
    FAMILY2(7, "family2"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "defaultLong1",
  "defaultStringEmpty",
  "columnLong",
  "unionRecursive",
  "unionString",
  "unionLong",
  "unionDefNull",
  "family2",
  };

  @Override
  public Map<String, Integer> getField2IndexMapping() {
    return FIELD2INDEX_MAP ;
  }

  @Override
  public Map<Integer, String> getIndex2FieldMapping() {
    return INDEX2FIELD_MAP ;
  }

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return TestRowDest._ALL_FIELDS.length;
  }

  private long defaultLong1;
  private java.lang.CharSequence defaultStringEmpty;
  private java.lang.Long columnLong;
  private org.apache.gora.cascading.test.storage.TestRowDest unionRecursive;
  private java.lang.CharSequence unionString;
  private java.lang.Long unionLong;
  private java.lang.Long unionDefNull;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> family2;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return defaultLong1;
    case 1: return defaultStringEmpty;
    case 2: return columnLong;
    case 3: return unionRecursive;
    case 4: return unionString;
    case 5: return unionLong;
    case 6: return unionDefNull;
    case 7: return family2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    if (field$ >= 0 && field$ < 8) {
      setDirty(field$) ;
    }
    switch (field$) {
    case 0: defaultLong1 = (java.lang.Long)(value); break;
    case 1: defaultStringEmpty = (java.lang.CharSequence)(value); break;
    case 2: columnLong = (java.lang.Long)(value); break;
    case 3: unionRecursive = (org.apache.gora.cascading.test.storage.TestRowDest)(value); break;
    case 4: unionString = (java.lang.CharSequence)(value); break;
    case 5: unionLong = (java.lang.Long)(value); break;
    case 6: unionDefNull = (java.lang.Long)(value); break;
    case 7: family2 = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'defaultLong1' field.
   */
  public java.lang.Long getDefaultLong1() {
    return defaultLong1;
  }

  /**
   * Sets the value of the 'defaultLong1' field.
   * @param value the value to set.
   */
  public void setDefaultLong1(java.lang.Long value) {
    this.defaultLong1 = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'defaultLong1' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isDefaultLong1Dirty(java.lang.Long value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'defaultStringEmpty' field.
   */
  public java.lang.CharSequence getDefaultStringEmpty() {
    return defaultStringEmpty;
  }

  /**
   * Sets the value of the 'defaultStringEmpty' field.
   * @param value the value to set.
   */
  public void setDefaultStringEmpty(java.lang.CharSequence value) {
    this.defaultStringEmpty = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'defaultStringEmpty' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isDefaultStringEmptyDirty(java.lang.CharSequence value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'columnLong' field.
   */
  public java.lang.Long getColumnLong() {
    return columnLong;
  }

  /**
   * Sets the value of the 'columnLong' field.
   * @param value the value to set.
   */
  public void setColumnLong(java.lang.Long value) {
    this.columnLong = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'columnLong' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isColumnLongDirty(java.lang.Long value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'unionRecursive' field.
   */
  public org.apache.gora.cascading.test.storage.TestRowDest getUnionRecursive() {
    return unionRecursive;
  }

  /**
   * Sets the value of the 'unionRecursive' field.
   * @param value the value to set.
   */
  public void setUnionRecursive(org.apache.gora.cascading.test.storage.TestRowDest value) {
    this.unionRecursive = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'unionRecursive' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isUnionRecursiveDirty(org.apache.gora.cascading.test.storage.TestRowDest value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'unionString' field.
   */
  public java.lang.CharSequence getUnionString() {
    return unionString;
  }

  /**
   * Sets the value of the 'unionString' field.
   * @param value the value to set.
   */
  public void setUnionString(java.lang.CharSequence value) {
    this.unionString = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'unionString' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isUnionStringDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'unionLong' field.
   */
  public java.lang.Long getUnionLong() {
    return unionLong;
  }

  /**
   * Sets the value of the 'unionLong' field.
   * @param value the value to set.
   */
  public void setUnionLong(java.lang.Long value) {
    this.unionLong = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'unionLong' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isUnionLongDirty(java.lang.Long value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'unionDefNull' field.
   */
  public java.lang.Long getUnionDefNull() {
    return unionDefNull;
  }

  /**
   * Sets the value of the 'unionDefNull' field.
   * @param value the value to set.
   */
  public void setUnionDefNull(java.lang.Long value) {
    this.unionDefNull = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'unionDefNull' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isUnionDefNullDirty(java.lang.Long value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'family2' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getFamily2() {
    return family2;
  }

  /**
   * Sets the value of the 'family2' field.
   * @param value the value to set.
   */
  public void setFamily2(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.family2 = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'family2' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFamily2Dirty(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    return isDirty(7);
  }

  /** Creates a new TestRowDest RecordBuilder */
  public static org.apache.gora.cascading.test.storage.TestRowDest.Builder newBuilder() {
    return new org.apache.gora.cascading.test.storage.TestRowDest.Builder();
  }
  
  /** Creates a new TestRowDest RecordBuilder by copying an existing Builder */
  public static org.apache.gora.cascading.test.storage.TestRowDest.Builder newBuilder(org.apache.gora.cascading.test.storage.TestRowDest.Builder other) {
    return new org.apache.gora.cascading.test.storage.TestRowDest.Builder(other);
  }
  
  /** Creates a new TestRowDest RecordBuilder by copying an existing TestRowDest instance */
  public static org.apache.gora.cascading.test.storage.TestRowDest.Builder newBuilder(org.apache.gora.cascading.test.storage.TestRowDest other) {
    return new org.apache.gora.cascading.test.storage.TestRowDest.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToWriteOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for TestRowDest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRowDest>
    implements org.apache.avro.data.RecordBuilder<TestRowDest> {

    private long defaultLong1;
    private java.lang.CharSequence defaultStringEmpty;
    private java.lang.Long columnLong;
    private org.apache.gora.cascading.test.storage.TestRowDest unionRecursive;
    private java.lang.CharSequence unionString;
    private java.lang.Long unionLong;
    private java.lang.Long unionDefNull;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> family2;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.gora.cascading.test.storage.TestRowDest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.gora.cascading.test.storage.TestRowDest.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing TestRowDest instance */
    private Builder(org.apache.gora.cascading.test.storage.TestRowDest other) {
            super(org.apache.gora.cascading.test.storage.TestRowDest.SCHEMA$);
      if (isValidValue(fields()[0], other.defaultLong1)) {
        this.defaultLong1 = (java.lang.Long) data().deepCopy(fields()[0].schema(), other.defaultLong1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.defaultStringEmpty)) {
        this.defaultStringEmpty = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.defaultStringEmpty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.columnLong)) {
        this.columnLong = (java.lang.Long) data().deepCopy(fields()[2].schema(), other.columnLong);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.unionRecursive)) {
        this.unionRecursive = (org.apache.gora.cascading.test.storage.TestRowDest) data().deepCopy(fields()[3].schema(), other.unionRecursive);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.unionString)) {
        this.unionString = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.unionString);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.unionLong)) {
        this.unionLong = (java.lang.Long) data().deepCopy(fields()[5].schema(), other.unionLong);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.unionDefNull)) {
        this.unionDefNull = (java.lang.Long) data().deepCopy(fields()[6].schema(), other.unionDefNull);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.family2)) {
        this.family2 = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) data().deepCopy(fields()[7].schema(), other.family2);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'defaultLong1' field */
    public java.lang.Long getDefaultLong1() {
      return defaultLong1;
    }
    
    /** Sets the value of the 'defaultLong1' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder setDefaultLong1(long value) {
      validate(fields()[0], value);
      this.defaultLong1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'defaultLong1' field has been set */
    public boolean hasDefaultLong1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'defaultLong1' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder clearDefaultLong1() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'defaultStringEmpty' field */
    public java.lang.CharSequence getDefaultStringEmpty() {
      return defaultStringEmpty;
    }
    
    /** Sets the value of the 'defaultStringEmpty' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder setDefaultStringEmpty(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.defaultStringEmpty = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'defaultStringEmpty' field has been set */
    public boolean hasDefaultStringEmpty() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'defaultStringEmpty' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder clearDefaultStringEmpty() {
      defaultStringEmpty = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'columnLong' field */
    public java.lang.Long getColumnLong() {
      return columnLong;
    }
    
    /** Sets the value of the 'columnLong' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder setColumnLong(java.lang.Long value) {
      validate(fields()[2], value);
      this.columnLong = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'columnLong' field has been set */
    public boolean hasColumnLong() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'columnLong' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder clearColumnLong() {
      columnLong = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'unionRecursive' field */
    public org.apache.gora.cascading.test.storage.TestRowDest getUnionRecursive() {
      return unionRecursive;
    }
    
    /** Sets the value of the 'unionRecursive' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder setUnionRecursive(org.apache.gora.cascading.test.storage.TestRowDest value) {
      validate(fields()[3], value);
      this.unionRecursive = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'unionRecursive' field has been set */
    public boolean hasUnionRecursive() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'unionRecursive' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder clearUnionRecursive() {
      unionRecursive = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'unionString' field */
    public java.lang.CharSequence getUnionString() {
      return unionString;
    }
    
    /** Sets the value of the 'unionString' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder setUnionString(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.unionString = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'unionString' field has been set */
    public boolean hasUnionString() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'unionString' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder clearUnionString() {
      unionString = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'unionLong' field */
    public java.lang.Long getUnionLong() {
      return unionLong;
    }
    
    /** Sets the value of the 'unionLong' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder setUnionLong(java.lang.Long value) {
      validate(fields()[5], value);
      this.unionLong = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'unionLong' field has been set */
    public boolean hasUnionLong() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'unionLong' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder clearUnionLong() {
      unionLong = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'unionDefNull' field */
    public java.lang.Long getUnionDefNull() {
      return unionDefNull;
    }
    
    /** Sets the value of the 'unionDefNull' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder setUnionDefNull(java.lang.Long value) {
      validate(fields()[6], value);
      this.unionDefNull = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'unionDefNull' field has been set */
    public boolean hasUnionDefNull() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'unionDefNull' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder clearUnionDefNull() {
      unionDefNull = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'family2' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getFamily2() {
      return family2;
    }
    
    /** Sets the value of the 'family2' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder setFamily2(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.family2 = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'family2' field has been set */
    public boolean hasFamily2() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'family2' field */
    public org.apache.gora.cascading.test.storage.TestRowDest.Builder clearFamily2() {
      family2 = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    @Override
    public TestRowDest build() {
      try {
        TestRowDest record = new TestRowDest();
        record.defaultLong1 = fieldSetFlags()[0] ? this.defaultLong1 : (java.lang.Long) defaultValue(fields()[0]);
        record.defaultStringEmpty = fieldSetFlags()[1] ? this.defaultStringEmpty : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.columnLong = fieldSetFlags()[2] ? this.columnLong : (java.lang.Long) defaultValue(fields()[2]);
        record.unionRecursive = fieldSetFlags()[3] ? this.unionRecursive : (org.apache.gora.cascading.test.storage.TestRowDest) defaultValue(fields()[3]);
        record.unionString = fieldSetFlags()[4] ? this.unionString : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.unionLong = fieldSetFlags()[5] ? this.unionLong : (java.lang.Long) defaultValue(fields()[5]);
        record.unionDefNull = fieldSetFlags()[6] ? this.unionDefNull : (java.lang.Long) defaultValue(fields()[6]);
        record.family2 = fieldSetFlags()[7] ? this.family2 : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[7]));
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public TestRowDest.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public TestRowDest newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends TestRowDest implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'defaultLong1' field.
		   */
	  public java.lang.Long getDefaultLong1() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'defaultLong1' field.
		   * @param value the value to set.
	   */
	  public void setDefaultLong1(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'defaultLong1' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isDefaultLong1Dirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'defaultStringEmpty' field.
		   */
	  public java.lang.CharSequence getDefaultStringEmpty() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'defaultStringEmpty' field.
		   * @param value the value to set.
	   */
	  public void setDefaultStringEmpty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'defaultStringEmpty' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isDefaultStringEmptyDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'columnLong' field.
		   */
	  public java.lang.Long getColumnLong() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'columnLong' field.
		   * @param value the value to set.
	   */
	  public void setColumnLong(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'columnLong' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isColumnLongDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'unionRecursive' field.
		   */
	  public org.apache.gora.cascading.test.storage.TestRowDest getUnionRecursive() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'unionRecursive' field.
		   * @param value the value to set.
	   */
	  public void setUnionRecursive(org.apache.gora.cascading.test.storage.TestRowDest value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'unionRecursive' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isUnionRecursiveDirty(org.apache.gora.cascading.test.storage.TestRowDest value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'unionString' field.
		   */
	  public java.lang.CharSequence getUnionString() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'unionString' field.
		   * @param value the value to set.
	   */
	  public void setUnionString(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'unionString' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isUnionStringDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'unionLong' field.
		   */
	  public java.lang.Long getUnionLong() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'unionLong' field.
		   * @param value the value to set.
	   */
	  public void setUnionLong(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'unionLong' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isUnionLongDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'unionDefNull' field.
		   */
	  public java.lang.Long getUnionDefNull() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'unionDefNull' field.
		   * @param value the value to set.
	   */
	  public void setUnionDefNull(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'unionDefNull' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isUnionDefNullDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'family2' field.
		   */
	  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getFamily2() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'family2' field.
		   * @param value the value to set.
	   */
	  public void setFamily2(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'family2' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFamily2Dirty(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}